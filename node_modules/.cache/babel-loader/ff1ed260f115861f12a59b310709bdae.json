{"ast":null,"code":"// ##############################\n// // // javascript library for creating charts\n// #############################\nvar Chartist = require(\"chartist\"); // ##############################\n// // // variables used to create animation on charts\n// #############################\n\n\nvar delays = 80,\n    durations = 500;\nvar delays2 = 80,\n    durations2 = 500; // ##############################\n// // // Numbers of Airlines for U.S domestic flights\n// #############################\n\nvar airlines = {\n  data: {\n    labels: ['1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018'],\n    series: [[30, 28, 17, 20, 20, 22, 21, 17, 18, 19, 18, 18, 16, 16, 15, 13, 13, 12, 12, 11, 10, 10, 10]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 40,\n    // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  // for animation\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n}; // ##############################\n// // // Numbers of flights for each airline\n// #############################\n\nvar flights_for_each_airline = {\n  data: {\n    labels: ['AA', 'AS', 'B6', 'DL', 'F9', 'FL', 'G4', 'NK', 'SY', 'UA', 'US', 'WN'],\n    series: [[351, 157, 154, 819, 85, 13, 104, 43, 3, 378, 454, 1439], [602, 184, 153, 819, 78, 0, 107, 42, 2, 326, 210, 1479], [916, 217, 161, 797, 57, 0, 115, 32, 2, 303, 0, 1400], [657, 156, 109, 624, 49, 0, 91, 31, 2, 225, 0, 1056], [223, 59, 37, 213, 11, 0, 43, 5, 2, 81, 0, 327]]\n  },\n  options: {\n    seriesBarDistance: 10,\n    axisX: {\n      showGrid: false\n    },\n    low: 0,\n    high: 1000,\n    chartPadding: {\n      top: 0,\n      right: 5,\n      bottom: 0,\n      left: 0\n    }\n  },\n  responsiveOptions: [[\"screen and (max-width: 640px)\", {\n    seriesBarDistance: 5,\n    axisX: {\n      labelInterpolationFnc: function labelInterpolationFnc(value) {\n        return value[0];\n      }\n    }\n  }]],\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"bar\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n}; // ##############################\n// // // Completed Tasks\n// #############################\n\nvar completedTasksChart = {\n  data: {\n    labels: [\"2014\", \"2015\", \"2016\", \"2017\"],\n    series: [[217, 226, 228, 171], [228, 234, 228, 168], [212, 209, 200, 154], [192, 188, 190, 140], [189, 172, 170, 125]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 300,\n    // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  animation: {\n    draw: function draw(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\nmodule.exports = {\n  airlines: airlines,\n  flights_for_each_airline: flights_for_each_airline,\n  completedTasksChart: completedTasksChart\n};","map":{"version":3,"sources":["/Users/zhuoyizou/Desktop/Bootcamp/Project #2/material-dashboard-react-master/src/variables/charts.jsx"],"names":["Chartist","require","delays","durations","delays2","durations2","airlines","data","labels","series","options","lineSmooth","Interpolation","cardinal","tension","low","high","chartPadding","top","right","bottom","left","animation","draw","type","element","animate","d","begin","dur","from","path","clone","scale","translate","chartRect","height","stringify","to","easing","Svg","Easing","easeOutQuint","opacity","index","flights_for_each_airline","seriesBarDistance","axisX","showGrid","responsiveOptions","labelInterpolationFnc","value","completedTasksChart","module","exports"],"mappings":"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","sourcesContent":["// ##############################\n// // // javascript library for creating charts\n// #############################\nvar Chartist = require(\"chartist\");\n\n// ##############################\n// // // variables used to create animation on charts\n// #############################\nvar delays = 80,\n  durations = 500;\nvar delays2 = 80,\n  durations2 = 500;\n\n// ##############################\n// // // Numbers of Airlines for U.S domestic flights\n// #############################\n\nconst airlines = {\n  data: {\n    labels: ['1996',\n    '1997',\n    '1998',\n    '1999',\n    '2000',\n    '2001',\n    '2002',\n    '2003',\n    '2004',\n    '2005',\n    '2006',\n    '2007',\n    '2008',\n    '2009',\n    '2010',\n    '2011',\n    '2012',\n    '2013',\n    '2014',\n    '2015',\n    '2016',\n    '2017',\n    '2018'],\n    series: [[30,\n      28,\n      17,\n      20,\n      20,\n      22,\n      21,\n      17,\n      18,\n      19,\n      18,\n      18,\n      16,\n      16,\n      15,\n      13,\n      13,\n      12,\n      12,\n      11,\n      10,\n      10,\n      10]]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 40, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  // for animation\n  animation: {\n    draw: function(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path\n              .clone()\n              .scale(1, 0)\n              .translate(0, data.chartRect.height())\n              .stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\n\n// ##############################\n// // // Numbers of flights for each airline\n// #############################\n\nconst flights_for_each_airline = {\n  data: {\n    labels: [\n      'AA', 'AS', 'B6', 'DL', 'F9', 'FL', 'G4', 'NK', 'SY', 'UA', 'US', 'WN'\n    ],\n    series: [[351, 157, 154, 819, 85, 13, 104, 43, 3, 378, 454, 1439],\n  [602, 184, 153, 819, 78, 0, 107, 42, 2, 326, 210, 1479],\n  [916, 217, 161, 797, 57, 0, 115, 32, 2, 303, 0, 1400],\n  [657, 156, 109, 624, 49, 0, 91, 31, 2, 225, 0, 1056],\n  [223, 59, 37, 213, 11, 0, 43, 5, 2, 81, 0, 327]\n]\n  },\n  options: {\n    seriesBarDistance: 10,\n    axisX: {\n      showGrid: false\n    },\n    low: 0,\n    high: 1000,\n    chartPadding: {\n      top: 0,\n      right: 5,\n      bottom: 0,\n      left: 0\n    }\n  },\n  responsiveOptions: [\n    [\n      \"screen and (max-width: 640px)\",\n      {\n        seriesBarDistance: 5,\n        axisX: {\n          labelInterpolationFnc: function(value) {\n            return value[0];\n          }\n        }\n      }\n    ]\n  ],\n  animation: {\n    draw: function(data) {\n      if (data.type === \"bar\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\n\n// ##############################\n// // // Completed Tasks\n// #############################\n\nconst completedTasksChart = {\n  data: {\n    labels: [\"2014\", \"2015\", \"2016\", \"2017\"],\n    series: [[217, 226, 228, 171], \n    [228, 234, 228, 168],\n    [212, 209, 200, 154],\n    [192, 188, 190, 140], \n    [189, 172, 170, 125]\n  ]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 300, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  animation: {\n    draw: function(data) {\n      if (data.type === \"line\" || data.type === \"area\") {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path\n              .clone()\n              .scale(1, 0)\n              .translate(0, data.chartRect.height())\n              .stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === \"point\") {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: \"ease\"\n          }\n        });\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  airlines,\n  flights_for_each_airline,\n  completedTasksChart\n};\n"]},"metadata":{},"sourceType":"module"}